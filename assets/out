#!/usr/bin/env bash

# Copyright 2017, Z Lab Corporation. All rights reserved.
# Copyright 2017, kubernetes resource contributors
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# shellcheck source=assets/common.sh
source "$(dirname "$0")/common.sh"

# Print the last exit code if it isn't 0 when this process exits
trap 'on_exit' EXIT


# The first argument is a path to the directory containing the build's full set of sources.

source_dir=$1
cd "$source_dir"

payload=$(mktemp "$TMPDIR/kubernetes-resource-request.XXXXXX")
cat > "$payload" <&0

setup_kubectl "$payload"


# Required. Specify the operation that you want to perform on one or more
# resources, for example apply, delete, label.


kubectl_command="$(jq -r '.params.kubectl // ""' < "$payload")"
if [[ -z "$kubectl_command" ]]; then
  echoerr 'kubectl must be specified in params.'
  exit 1
fi

branch="$(jq -r '.params.branch // ""' < "$payload")"
export BRANCH=$branch

do_pull="$(jq -r '.params.do_pull // ""' < "$payload")"
export DO_PULL=$do_pull

mkdir -p /root/data-marketplace-chaincode

cd /root/data-marketplace-chaincode
git clone https://github.com/lgsvl/data-marketplace-chaincode.git

git checkout version-$BRANCH
git pull
export CHAINCODE_VERSION=`cat VERSION`
git checkout $BRANCH

if [[ "$DO_PULL" == "true" ]]; then
  git pull
fi

mv .git /tmp
rm -rf scripts
rm -rf fakes
cd -

# Optional.chaincode_name
chaincode_name="$(jq -r '.params.chaincode_name // ""' < "$payload")"
export CHAINCODE_NAME=$chaincode_name
# Optional. channel_name
channel_name="$(jq -r '.params.channel_name // ""' < "$payload")"
export CHANNEL_NAME=$channel_name
# Optional. orderer url
orderer_url="$(jq -r '.params.orderer_url // ""' < "$payload")"
export ORDERER_URL=$orderer_url

chaincode_path="$(jq -r '.params.chaincode_path // ""' < "$payload")"
export CHAINCODE_PATH=$chaincode_path



IFS=" " read -r -a kubectl_arguments <<< "$(eval "echo $kubectl_command")"
exe kubectl "${kubectl_arguments[@]}"

# Optional. The number of seconds that waits until all pods are ready. Defaults to `30`.
wait_until_ready="$(jq -r '.params.wait_until_ready // 30' < "$payload")"
# Optional. The interval (sec) on which to check whether all pods are ready or not. Defaults to `3`.
wait_until_ready_interval="$(jq -r '.params.wait_until_ready_interval // 3' < "$payload")"
# Optional. A label selector to identify a set of pods which to check whether those are ready. Defaults to every pods in the namespace.
wait_until_ready_selector="$(jq -r '.params.wait_until_ready_selector // ""' < "$payload")"


if [[ "$wait_until_ready" -ne 0 ]]; then
  wait_until_pods_ready "$wait_until_ready" "$wait_until_ready_interval" "$wait_until_ready_selector"
fi

jq --arg kubectl "$kubectl_command" \
   --arg namespace "$(current_namespace)" \
   --arg cluster "$(current_cluster)" \
    -n '{
  "version": {
    "kubectl": $kubectl
  },
  "metadata": [
    {"name": "namespace", "value": $namespace},
    {"name": "cluster", "value": $cluster}
  ]
}' >&3

mv /tmp/.git data-marketplace-chaincode/.git
# vim: ai ts=2 sw=2 et sts=2 ft=sh
